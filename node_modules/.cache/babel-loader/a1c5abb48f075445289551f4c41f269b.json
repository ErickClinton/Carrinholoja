{"ast":null,"code":"var _jsxFileName = \"/home/erick/Ignite/ignite-template-reactjs-criando-um-hook-de-carrinho-de-compras/src/hooks/useCart.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { api } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext({});\nexport function CartProvider({\n  children\n}) {\n  _s();\n\n  const [cart, setCart] = useState(() => {\n    const storagedCart = localStorage.getItem('@RocketShoes:cart');\n\n    if (storagedCart) {\n      return JSON.parse(storagedCart);\n    }\n\n    return [];\n  });\n\n  const addProduct = async productId => {\n    try {\n      const updatedCart = [...cart];\n      const productExists = updateCart.find(product => product.id === productId);\n      const stock = await api.get(`/stock/${productId}`);\n      const stockAmount = stock.data.amount;\n      const currentAmount = productExists ? productExists.amount : 0;\n      const amount = currentAmount + 1;\n\n      if (amount > stockAmount) {\n        toast.error('Quantidade solicitada fora de estoque');\n        return;\n      }\n\n      if (productExists) {\n        productExists.amount = amount;\n      } else {\n        const product = await api.get(`/products/${productId}`);\n        const newProduct = { ...product.data,\n          amount: 1\n        };\n        updateCart.push(newProduct);\n      }\n\n      setCart(updateCart);\n      localStorage.setItem('@RocketShoes:cart', JSON.stringify(updatedCart));\n    } catch {\n      toast.error('Erro na adição do produto');\n    }\n  };\n\n  const removeProduct = productId => {\n    try {\n      const updatedCart = [...cart];\n      const productIndex = updatedCart.findIndex(product => product.id === productId);\n\n      if (productIndex >= 0) {\n        updatedCart.splice(productIndex, 1);\n        setCart(updatedCart);\n        localStorage.setItem('@RocketShoes:cart', JSON.stringify(updatedCart));\n      } else {\n        throw Error();\n      }\n    } catch {\n      toast.error('Erro na remoção do produto');\n    }\n  };\n\n  const updateProductAmount = async ({\n    productId,\n    amount\n  }) => {\n    try {\n      if (amount <= 0) {\n        return;\n      }\n\n      const stock = await api.get(`/stock/${productId}`);\n      const stockAmount = stock.data.amount;\n\n      if (amount > stockAmount) {\n        toast.error('Quantidade solicitada fora de estoque');\n        return;\n      }\n\n      const updatedCart = [...cart];\n      const productExists = updatedCart.find(product => product.id === productId);\n\n      if (productExists) {\n        productExists.amount = amount;\n        setCart(updatedCart);\n        localStorage.setItem('@RocketShoes:cart', JSON.stringify(updatedCart));\n      } else {\n        throw Error();\n      }\n    } catch {\n      toast.error('Erro na alteração de quantidade do produto');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cart,\n      addProduct,\n      removeProduct,\n      updateProductAmount\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CartProvider, \"iwNuM7EpWE1uADF0zfVvruFPBZ4=\");\n\n_c = CartProvider;\nexport function useCart() {\n  _s2();\n\n  const context = useContext(CartContext);\n  return context;\n}\n\n_s2(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/home/erick/Ignite/ignite-template-reactjs-criando-um-hook-de-carrinho-de-compras/src/hooks/useCart.tsx"],"names":["createContext","useContext","useState","toast","api","CartContext","CartProvider","children","cart","setCart","storagedCart","localStorage","getItem","JSON","parse","addProduct","productId","updatedCart","productExists","updateCart","find","product","id","stock","get","stockAmount","data","amount","currentAmount","error","newProduct","push","setItem","stringify","removeProduct","productIndex","findIndex","splice","Error","updateProductAmount","useCart","context"],"mappings":"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","sourcesContent":["import { createContext, ReactNode, useContext, useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { api } from '../services/api';\nimport { Product, Stock } from '../types';\n\ninterface CartProviderProps {\n  children: ReactNode;\n}\n\ninterface UpdateProductAmount {\n  productId: number;\n  amount: number;\n}\n\ninterface CartContextData {\n  cart: Product[];\n  addProduct: (productId: number) => Promise<void>;\n  removeProduct: (productId: number) => void;\n  updateProductAmount: ({ productId, amount }: UpdateProductAmount) => void;\n}\n\nconst CartContext = createContext<CartContextData>({} as CartContextData);\n\nexport function CartProvider({ children }: CartProviderProps): JSX.Element {\n  const [cart, setCart] = useState<Product[]>(() => {\n    const storagedCart =  localStorage.getItem('@RocketShoes:cart');\n\n    if (storagedCart) {\n      return JSON.parse(storagedCart);\n     }\n\n    return [];\n  });\n\n  const addProduct = async (productId: number) => {\n    try {\n      const updatedCart = [...cart];\n      const productExists = updateCart.find(product => product.id === productId);\n\n      const stock = await api.get(`/stock/${productId}`);\n      const stockAmount = stock.data.amount;\n      const currentAmount = productExists ? productExists.amount : 0;\n      const amount = currentAmount + 1;\n\n      if(amount > stockAmount){\n        toast.error('Quantidade solicitada fora de estoque');\n        return;\n      }\n      if(productExists){\n        productExists.amount = amount;\n      }else{\n        const product = await api.get(`/products/${productId}`);\n        const newProduct = {\n          ...product.data,\n          amount:1\n        }\n        updateCart.push(newProduct);\n\n      }\n      setCart(updateCart);\n      \n      localStorage.setItem('@RocketShoes:cart', JSON.stringify(updatedCart) )\n\n    } catch {\n      \n      toast.error('Erro na adição do produto');\n    }\n  };\n\n  const removeProduct = (productId: number) => {\n    try {\n      const updatedCart = [...cart];\n      const productIndex = updatedCart.findIndex(product => product.id === productId);\n\n      if (productIndex >=0){\n        updatedCart.splice(productIndex, 1);\n        setCart(updatedCart);\n        localStorage.setItem('@RocketShoes:cart', JSON.stringify(updatedCart) )\n\n      }else{\n        throw Error();\n      }\n       \n    } catch {\n      \n      toast.error('Erro na remoção do produto');\n      \n    }\n  };\n\n  const updateProductAmount = async ({\n    productId,\n    amount,\n  }: UpdateProductAmount) => {\n    try {\n      if(amount <= 0){\n        return;\n      }\n\n      const stock = await api.get(`/stock/${productId}`);\n      const stockAmount = stock.data.amount;\n\n      if (amount > stockAmount){\n        \n        toast.error('Quantidade solicitada fora de estoque');\n        return;\n\n      }\n      const updatedCart = [...cart];\n      const productExists = updatedCart.find(product => product.id === productId);\n\n      if (productExists){\n        productExists.amount = amount;\n        setCart(updatedCart);\n        localStorage.setItem('@RocketShoes:cart', JSON.stringify(updatedCart) )\n\n      }else{\n        throw Error();\n      }\n\n    } catch {\n      toast.error('Erro na alteração de quantidade do produto');\n    }\n  };\n\n  return (\n    <CartContext.Provider\n      value={{ cart, addProduct, removeProduct, updateProductAmount }}\n    >\n      {children}\n    </CartContext.Provider>\n  );\n}\n\nexport function useCart(): CartContextData {\n  const context = useContext(CartContext);\n\n  return context;\n}\n"]},"metadata":{},"sourceType":"module"}